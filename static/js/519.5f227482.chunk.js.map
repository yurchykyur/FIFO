{"version":3,"file":"static/js/519.5f227482.chunk.js","mappings":"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","sources":["components/RegisterForm/RegisterForm.jsx","pages/Register.jsx"],"sourcesContent":["import React from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\nimport { useFormik } from 'formik';\nimport * as yup from 'yup';\n\nimport {\n  TextField,\n  Button,\n  Container,\n  CssBaseline,\n  Box,\n  Avatar,\n  Typography,\n  Grid,\n  Link,\n} from '@mui/material';\nimport LockOutlinedIcon from '@mui/icons-material/LockOutlined';\n\nimport * as myRoute from 'constants/Routes';\nimport { useDispatch } from 'react-redux';\nimport { register } from 'redux/auth/operations';\n\nconst INITIAL_FORM_STATE = { email: '', password: '', name: '' };\n\nconst validationSchema = yup.object({\n  email: yup\n    .string('Enter your email')\n    .email('Enter a valid email')\n    .required('Email is required'),\n  password: yup\n    .string('Enter your password')\n    .min(8, 'Password should be of minimum 8 characters length')\n    .required('Password is required'),\n  name: yup\n    .string('Enter your name')\n    .min(2)\n    .max(50)\n    .required('Name is required'),\n});\n\nexport default function RegisterForm() {\n  const dispatch = useDispatch();\n  const formik = useFormik({\n    initialValues: INITIAL_FORM_STATE,\n    validationSchema: validationSchema,\n    onSubmit: values => {\n      dispatch(register(values));\n    },\n  });\n\n  return (\n    <Container component=\"main\" maxWidth=\"xs\">\n      <CssBaseline />\n      <Box\n        sx={{\n          marginTop: { xs: 12, md: 20 },\n          display: 'flex',\n          flexDirection: 'column',\n          alignItems: 'center',\n        }}\n      >\n        <Avatar sx={{ m: 1, bgcolor: 'secondary.main' }}>\n          <LockOutlinedIcon />\n        </Avatar>\n        <Typography component=\"h1\" variant=\"h5\" sx={{ mb: 1 }}>\n          Sign up\n        </Typography>\n        <form onSubmit={formik.handleSubmit} style={{ width: '100%' }}>\n          <Grid container spacing={0}>\n            <Grid item xs={12}>\n              <TextField\n                fullWidth\n                id=\"name\"\n                name=\"name\"\n                label=\"Name\"\n                margin=\"normal\"\n                autoComplete=\"name\"\n                variant=\"outlined\"\n                value={formik.values.name}\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n                error={formik.touched.name && Boolean(formik.errors.name)}\n                helperText={formik.touched.name && formik.errors.name}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                fullWidth\n                id=\"email\"\n                name=\"email\"\n                label=\"Email\"\n                margin=\"normal\"\n                autoComplete=\"email\"\n                variant=\"outlined\"\n                value={formik.values.email}\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n                error={formik.touched.email && Boolean(formik.errors.email)}\n                helperText={formik.touched.email && formik.errors.email}\n              />\n            </Grid>\n\n            <Grid item xs={12}>\n              <TextField\n                fullWidth\n                id=\"password\"\n                name=\"password\"\n                label=\"Password\"\n                margin=\"normal\"\n                type=\"password\"\n                variant=\"outlined\"\n                value={formik.values.password}\n                onChange={formik.handleChange}\n                onBlur={formik.handleBlur}\n                error={\n                  formik.touched.password && Boolean(formik.errors.password)\n                }\n                helperText={formik.touched.password && formik.errors.password}\n              />\n            </Grid>\n\n            <Grid item xs={12} sx={{ mt: 3, mb: 2 }}>\n              <Button\n                color=\"primary\"\n                variant=\"contained\"\n                fullWidth\n                type=\"submit\"\n                disabled={!formik.dirty || !formik.isValid}\n              >\n                Sign Up\n              </Button>\n            </Grid>\n\n            <Grid container>\n              <Grid item xs>\n                <Link href=\"#\" variant=\"body2\">\n                  Forgot password? (Not Work)\n                </Link>\n              </Grid>\n              <Grid item>\n                <Link component={RouterLink} to={myRoute.login} variant=\"body2\">\n                  {\"Don't have an account? Sign in\"}\n                </Link>\n              </Grid>\n            </Grid>\n          </Grid>\n        </form>\n      </Box>\n    </Container>\n  );\n}\n","import { Helmet } from 'react-helmet';\n\nimport RegisterForm from 'components/RegisterForm';\n\nexport default function Register() {\n  return (\n    <div>\n      <Helmet>\n        <title>Registration</title>\n      </Helmet>\n      <RegisterForm />\n    </div>\n  );\n}\n"],"names":["INITIAL_FORM_STATE","email","password","name","validationSchema","yup","required","min","max","RegisterForm","dispatch","useDispatch","formik","useFormik","initialValues","onSubmit","values","register","Container","component","maxWidth","CssBaseline","Box","sx","marginTop","xs","md","display","flexDirection","alignItems","Avatar","m","bgcolor","LockOutlined","Typography","variant","mb","handleSubmit","style","width","Grid","container","spacing","item","TextField","fullWidth","id","label","margin","autoComplete","value","onChange","handleChange","onBlur","handleBlur","error","touched","Boolean","errors","helperText","type","mt","Button","color","disabled","dirty","isValid","Link","href","RouterLink","to","myRoute","Register","Helmet"],"sourceRoot":""}